<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<#
	string path =  Path.GetDirectoryName(((ITextTemplatingEngineHost)Host).TemplateFile);
	XDocument xDoc = XDocument.Load(Path.Combine(path, "VfpMapping.xml"));
#>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;

namespace VfpClient
{
    public static partial class VfpMapping
    {
		private static readonly IDictionary<VfpType, string> _vfpTypeToVfpTypeName = 
			new Dictionary<VfpType, string> {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
			#>	{ VfpType.<#= item.Attribute("VfpType").Value #>, "<#= (item.Attribute("TypeName") ?? item.Attribute("VfpType")).Value #>" },
			<# } 
		#>};

		private static readonly IDictionary<VfpType, Type> _vfpTypeToClrType = 
			new Dictionary<VfpType, Type> {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
			#>	{ VfpType.<#= item.Attribute("VfpType").Value #>, typeof(<#= item.Attribute("ClrType").Value #>) },
			<# } 
		#>};

		private static readonly IDictionary<VfpType, DbType> _vfpTypeToDbType = 
			new Dictionary<VfpType, DbType> {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
			#>	{ VfpType.<#= item.Attribute("VfpType").Value #>, DbType.<#= item.Descendants("DbType").First().Value #> },
			<# } 
		#>};

		private static readonly IDictionary<VfpType, OleDbType> _vfpTypeToOleDbType = 
			new Dictionary<VfpType, OleDbType> {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
			#>	{ VfpType.<#= item.Attribute("VfpType").Value #>, OleDbType.<#= item.Descendants("OleDbType").First().Value #> },
			<# } 
		#>};

		private static readonly IDictionary<DbType, VfpType> _dbTypeToVfpType = 
			new Dictionary<DbType, VfpType> {
			<# foreach(KeyValuePair<string, string> keyValuePair in GetDbTypeToVfpType(xDoc)) {
			#>	{ DbType.<#= keyValuePair.Key #>, VfpType.<#= keyValuePair.Value #> },
			<# } 
		#>};

		private static readonly IDictionary<OleDbType, VfpType> _oleDbTypeToVfpType = 
			new Dictionary<OleDbType, VfpType> {
			<# foreach(KeyValuePair<string, string> keyValuePair in GetOleDbTypeToVfpType(xDoc)) {
			#>	{ OleDbType.<#= keyValuePair.Key #>, VfpType.<#= keyValuePair.Value #> },
			<# } 
		#>};

		private static readonly IDictionary<string, string> _vfpAbbrevToVfpTypeName = 
			new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase) {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
				if(item.Attribute("FieldType") != null && item.Attribute("TypeName") == null) {
				#>	{ "<#= item.Attribute("FieldType").Value.Substring(0, 1) #>", "<#= (item.Attribute("TypeName") ?? item.Attribute("VfpType")).Value #>" },
			<# } 
			}
		#>};

		private static readonly IDictionary<VfpType, string> _vfpTypeToFieldType = 
			new Dictionary<VfpType, string> {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
				if(item.Attribute("FieldType") != null) {
				#>	{ VfpType.<#= item.Attribute("VfpType").Value #>, "<#= item.Attribute("FieldType").Value #>" },
			<# } 
			}
		#>};

		private static readonly IDictionary<string, VfpType> _vfpAbbrevToVfpType = 
			new Dictionary<string, VfpType>(StringComparer.InvariantCultureIgnoreCase) {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
				if(item.Attribute("FieldType") != null && item.Attribute("TypeName") == null) {
				#>	{ "<#= item.Attribute("FieldType").Value.Substring(0, 1) #>", VfpType.<#= item.Attribute("VfpType").Value #> },
			<# } 
			}
		#>};

		private static readonly IDictionary<string, VfpType> _vfpTypeNameToVfpType = 
			new Dictionary<string, VfpType>(StringComparer.InvariantCultureIgnoreCase) {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
				#>	{ "<#= (item.Attribute("TypeName") ?? item.Attribute("VfpType")).Value #>", VfpType.<#= item.Attribute("VfpType").Value #> },
			<# }
		#>};

		private static readonly IDictionary<string, string> _dbTypeNameToVfpTypeName = 
			new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase) {
			<# foreach(XElement item in xDoc.Descendants("Item")) {
				if(item.Attribute("DbTypeName") != null) {
				#>	{ "<#= item.Attribute("DbTypeName").Value #>", "<#= (item.Attribute("TypeName") ?? item.Attribute("VfpType")).Value #>" },
			<# } 
			}
		#>};
	}
}
<#+
	IDictionary<string, string> GetOleDbTypeToVfpType(XDocument xDoc) {
		IDictionary<string, string> oleDbTypeToVfpType = new Dictionary<string, string>();
		
		List<KeyValuePair<string, string>> keyValuePairs = xDoc.Descendants("OleDbType")
					.Select (x => new KeyValuePair<string, string>(x.Value, x.Parent.Attribute("VfpType").Value))
					.ToList();
	
		foreach(KeyValuePair<string, string> keyValuePair in keyValuePairs) {
			if(oleDbTypeToVfpType.Keys.Contains(keyValuePair.Key)) continue;
		
			oleDbTypeToVfpType.Add(keyValuePair.Key, keyValuePair.Value);
		}			

		return oleDbTypeToVfpType;
	}

	IDictionary<string, string> GetDbTypeToVfpType(XDocument xDoc) {
		IDictionary<string, string> dbTypeToVfpType = new Dictionary<string, string>();
		
		List<KeyValuePair<string, string>> keyValuePairs = xDoc.Descendants("DbType")
					.Select (x => new KeyValuePair<string, string>(x.Value, x.Parent.Attribute("VfpType").Value))
					.ToList();
	
		foreach(KeyValuePair<string, string> keyValuePair in keyValuePairs) {
			if(dbTypeToVfpType.Keys.Contains(keyValuePair.Key)) continue;
		
			dbTypeToVfpType.Add(keyValuePair.Key, keyValuePair.Value);
		}			

		return dbTypeToVfpType;
	}
#>